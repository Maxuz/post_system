  Этап 1
  	Сделать аутентификацию и авторизацию.
      Внимательно убедиться что внешний мир не имеет доступа. 
      OWASP ZAP (https://github.com/zaproxy/zaproxy) - проверить с помощью данной утилиты на безопасность
      тестирование сайта на безопасность - https://toster.ru/q/158349
      Время жизни сессии (после добавления авторизации и аутентификации проверить что после истечения срока доступ блокируется)
      
  	Понять в какой момент добавляется SSL и добавить.
      
    Перенос текущих заметок
    Создание задания на ежедневное создание резервной копии с храниением предыдущих в течении 2-х недель
    Написать вопрос про allocatedSize в Hibernate
    Сделать все TODO
    
    Добавить возможность вставки изображений
    	понять как хранить в бд или как файлы
  	
  	
    Выбрать хостинг и захостить приложение
    
    Сделать домен прикрутить к хостингу
      в зависимости от СП сделать настройки логирования, чтобы из СП можно было указать уровень логирования
      
    Логирование посещений (piwik: http://demo.piwik.org/)
    
+++++++++++++++++++++++++++++++++++++
    сделано:
      тесты
      Найти framework и написать на базовый функционал
    Доделать mapping (удаление сущностей и пр. в целом привести все сущности в порядок)
      Можно сразу отрефакторить
      Исправить выборки с HQL на Criteria
    Сделать минимальный внешний вид
      Пока все делаем в JSF
      

===================================================================================================================
  Этап 2
    Выбираем как делать внешний вид
      Толстый клиент (Angular или что-то другое)
        За: 
          просмотр изображений
          подсветка синтаксиса кода
      Тонкий клиент (spring, JSF, tapestry, wicket)
      	Если переходим на другой фреймворк, отказаться от glassfish в пользу более легкого СП
      	Если оставляем JSF то узнать как сделать правильный MVC в JSF
      Если выбрали новый то переносим все на него
    Тесты + рефакторинг
    	сделать класс TransferService: обязанность с помощью DAO выполнять операции связанные с БД
    	в одном месте, т.е. чтобы создание сессии и транзакции было в одном месте, в этом случае
    	можно будет переписать тесты: написать тесты проверяющие работу методов TransferService,
    	и сделать через моки все остальное, т.е. сделать mock на TransferService и проверть то что 
    	программа зовет эти методы.
      
    Проверка всех значений вводимых пользователем
    Начинаем наполнять функционалом
      Поиск
      Список таги с ссылкой, показывающей все статьи с данным тагом
      Список категорий с ссылкой, показывающей все статьи в данной категории
      Добавление изображений в статьи
      	Добавление изображения в заголовок и 
      Что я узнал за сегодня с системой проверки (например поднимать окно с указанным вопросом)
      Список прочитанных книг
    Доработать дизайн
      Дизайн
      Страничный показ, т.е. показывать на странице N-записей, с распределением по страницам
      Показывать только часть статьи, остальное ссылка на полную версию
      Темная и светлая тема
      
===================================================================================================================    
  Этап 3
    HTTPS
    удобный выбор тагов
    Нагрузочное тестирование
    Система доступа, что-то доступно внешнему миру, а что-то нет - под вопросом, может и не нужно
      допустим публиковать хорошие статьи в отдельном месте
      если даем доступ делаем возможность комментирования с возможностью авторизации через соц сети
    популярность статей
    


Заметки:
Удаление из списка поиска поисковых систем (http://robotstxt.org.ru/)
    
Используемые технологии:
База данных PostgreSQL
JPA - Hibernate
Server - glassfish
FrontEnd - AngularJS
